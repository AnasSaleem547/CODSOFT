

#include <sys/types.h> #include <stdio.h> #include <string.h>
#include <unistd.h>
#define BUFFER_SIZE 25 #define READ END O
#define WRITE END 1
int main(void) {
char write_msg[BUFFER_SIZE] = "Greetings"; char read_msg[BUFFER_SIZE];
int fd[2]: pid t pid;
if (pipe(fd)== -1) { // create a pipe fprintf(stderr, "Pipe failed");
}
return 1;
pid = fork();
if (pid < 0) { /* error occurred */ fprintf(stderr, "Fork Failed"); return 1;
}
if (pid > 0) { /* parent process"/
}
close(fd[READ_END]);
write(fd [WRITE_END], write_msg, strlen(write_msg) + 1); close(fd [WRITE_END]);
else { child process"/
close(fd [WRITE_END]); // close the unused end of the pipe
read (fd [READ_END], read_msg, BUFFER_SIZE); // read from the pipe printf("read %s", read_msg);
close(fd [READ END]); // close the read end of the pipe
return 0;
Page 2
5
